// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens           Token[]
  sessions         Session[]
  groups           Group[]
  userGroupMatches UserGroupMatch[]
  userGroup        UserGroup[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model UserGroup {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  group     Group    @relation(fields: [groupId], references: [id])
  groupId   Int
  role      String   @default("USER")
  pending   Boolean  @default(true)
  createdAt DateTime @default(now())

  @@id([userId, groupId])
}

model Group {
  id             Int              @id @default(autoincrement())
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  name           String?
  inviteCode     String           @unique
  users          User             @relation(fields: [id], references: [id])
  UserGroupMatch UserGroupMatch[]
  UserGroup      UserGroup[]
}

model Team {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        Int
  image       String?
  homeMatches Match[]  @relation("homeMatches")
  awayMatches Match[]  @relation("awayMatches")
}

model Match {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  homeTeam   Team     @relation("homeMatches", fields: [id], references: [id])
  awayTeam   Team     @relation("awayMatches", fields: [id], references: [id])
  kickOff    DateTime
  resultHome Int?
  resultAway Int?
}

model UserGroupMatch {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  result1   Int
  resultX   Int
  result2   Int
  user      User     @relation(fields: [id], references: [id])
  group     Group    @relation(fields: [id], references: [id])
}
