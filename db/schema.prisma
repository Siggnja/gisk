// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  name              String?
  email             String            @unique
  hashedPassword    String?
  role              String            @default("USER")
  tokens            Token[]
  sessions          Session[]
  userLeagueMatches UserLeagueMatch[]
  userLeague        UserLeague[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

model UserLeague {
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  league    League   @relation(fields: [leagueId], references: [id])
  leagueId  Int
  role      String   @default("USER")
  createdAt DateTime @default(now())

  @@id([userId, leagueId])
}

model League {
  id              Int               @id @default(autoincrement())
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  name            String?
  inviteCode      String            @unique
  UserLeagueMatch UserLeagueMatch[]
  UserLeague      UserLeague[]
}

model Team {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  name        String   @unique
  countryCode String   @unique
  group       String
  homeMatches Match[]  @relation("homeMatches")
  awayMatches Match[]  @relation("awayMatches")
}

model Match {
  id                Int               @id @default(autoincrement())
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  homeTeam          Team              @relation("homeMatches", fields: [id], references: [id])
  awayTeam          Team              @relation("awayMatches", fields: [id], references: [id])
  kickOff           DateTime
  resultHome        Int?
  resultAway        Int?
  round             String
  arena             String
  userLeagueMatches UserLeagueMatch[]
}

model UserLeagueMatch {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  result1   Int
  resultX   Int
  result2   Int
  user      User     @relation(fields: [id], references: [id])
  league    League   @relation(fields: [id], references: [id])
  match     Match    @relation(fields: [id], references: [id])
}
